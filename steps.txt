1. Create the api folder: node-api
2. Inside the node-api, run the command: npm -init -y
3. The command in step 2 creates the package.json, which stores the dependencies of the application
4. Install Express: npm install express

Express microframework to deal with routes and views: 
    - Routes: URL address that the user can access;
    - Views: The views haha (not gonna be used by the API).

5. Create the main config file of the application: server.js
6. Install Nodemon to run live updates on the files: npm install -D nodemon 
    add the script ("dev" : "nodemon server.js" ) to the package.json file
7. To run the script use: npm run dev

8. Install docker
9. Install mongodb container: docker pull mongo
10. After install the mongodb container, it is necessary
to create and execute the container (since  mongodb uses the port 27017,
we have to do the port fowarding of our requests to the 27017 port 
to the 27017 port of the container)
with the command: 
    docker run --name mongodb -p 27017:27017 -d mongo
to check suspended containers:
    docker ps -a
to start the execution of a container after restart of your computer:
    docker start 'your_container_name'
11. To test if it is working, you can access: http://localhost:27017/
12. You can also install robo3t to check and manage mongodb

13. Now connect to database. Install new dependencie (mongoose is ORM for non relation databases):
    npm install mongoose
14. Create our first model
15. Install a library to require files in a directory automatically (in this case for the models): 
    npm install require-dir 

16. Install Insomnia to debug the api
17. Install the module mongoose paginate, it is a cursor based custom pagination 
library for Mongoose with customizable labels:
    npm install mongoose-paginate